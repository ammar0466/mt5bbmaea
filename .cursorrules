{
  "formatOnSave": true,
  "editor.rulers": [80],
  "files.associations": {
    "*.mq5": "mql5",
    "*.mqh": "mql5"
  },
  "search.exclude": {
    "**/tester/": true,
    "**/logs/": true
  },
  "mql5.linting": {
    "all": true,
    "unusedVariables": "warning",
    "possibleTypo": "warning"
  },
  "git.remote": "git@github.com:ammar0466/mt5bbmaea.git",
  "project.structure": {
    "description": "Bollinger Bands and Moving Averages Expert Advisor for MetaTrader 5",
    "root": "bbmea",
    "directories": {
      "Experts": {
        "description": "Contains the main EA file",
        "files": {
          "BBMA_EA/main.mq5": "Main EA file with trading logic"
        }
      },
      "Include": {
        "description": "Contains library files and custom functions",
        "files": {
          "BBMA_Lib/types.mqh": "Custom data structures and types",
          "BBMA_Lib/constants.mqh": "Trading parameters and constants",
          "BBMA_Lib/utils.mqh": "Utility functions for calculations"
        }
      }
    },
    "files": {
      "README.md": "Project documentation and setup instructions",
      "DASHBOARD.md": "Markdown representation of EA dashboard",
      "TASKS.md": "Project tasks and roadmap",
      "LICENSE": "Project license information",
      "mt5ea.mq5": "Legacy EA file (to be replaced)",
      "CHANGELOG.md": "Record of changes and updates"
    },
    "dependencies": {
      "mql5": "MetaTrader 5 platform",
      "libraries": [
        "Trade.mqh",
        "PositionInfo.mqh",
        "AccountInfo.mqh"
      ]
    }
  },
  "task.tracking": {
    "description": "System for tracking tasks and changes",
    "task_file": "TASKS.md",
    "changelog_file": "CHANGELOG.md",
    "task_format": "- [ ] Task description",
    "completed_format": "- [x] Task description",
    "changelog_format": "## [YYYY-MM-DD] - Description\n\n- Added: Feature or change\n- Fixed: Bug fix\n- Changed: Modification to existing feature\n- Removed: Removed feature",
    "commands": {
      "mark_task_complete": "sed -i 's/- \\[ \\] Task description/- [x] Task description/' TASKS.md",
      "add_task": "echo '- [ ] New task description' >> TASKS.md",
      "add_changelog": "echo '## [$(date +%Y-%m-%d)] - Description\n\n- Added: Feature or change' >> CHANGELOG.md"
    },
    "workflow": {
      "1": "When completing a task, mark it as done in TASKS.md",
      "2": "Add the change to CHANGELOG.md with date and description",
      "3": "Commit both files with appropriate commit message",
      "4": "When discovering new tasks, add them to TASKS.md"
    }
  },
  "git.docs": {
    "setup": {
      "init": "git init",
      "clone": "git clone git@github.com:ammar0466/mt5bbmaea.git",
      "remote": "git remote add origin git@github.com:ammar0466/mt5bbmaea.git"
    },
    "daily_workflow": {
      "status": "git status",
      "add": "git add <file> or git add .",
      "commit": "git commit -m \"type: description\"",
      "push": "git push origin main",
      "pull": "git pull origin main"
    },
    "commit_types": {
      "feat": "new feature",
      "fix": "bug fix",
      "docs": "documentation changes",
      "style": "formatting, missing semi colons, etc",
      "refactor": "code change that neither fixes a bug nor adds a feature",
      "test": "adding missing tests",
      "chore": "maintain"
    },
    "branches": {
      "create": "git checkout -b <branch-name>",
      "switch": "git checkout <branch-name>",
      "merge": "git merge <branch-name>"
    },
    "undo": {
      "unstage": "git restore --staged <file>",
      "discard_changes": "git restore <file>",
      "undo_commit": "git reset --soft HEAD~1"
    }
  },
  "snippets": {
    "mql5": {
      "function": {
        "prefix": "func",
        "body": [
          "//+------------------------------------------------------------------+",
          "//| ${1:Function description}                                         |",
          "//+------------------------------------------------------------------+",
          "${2:void} ${3:functionName}(${4:parameters})",
          "{",
          "    ${0}",
          "}"
        ]
      },
      "class": {
        "prefix": "class",
        "body": [
          "//+------------------------------------------------------------------+",
          "//| ${1:Class description}                                           |",
          "//+------------------------------------------------------------------+",
          "class ${2:ClassName}",
          "{",
          "private:",
          "    ${3:// Private members}",
          "",
          "public:",
          "    ${2:ClassName}() { ${4:// Constructor} }",
          "    ~${2:ClassName}() { ${5:// Destructor} }",
          "",
          "    ${0:// Public methods}",
          "};"
        ]
      },
      "header": {
        "prefix": "header",
        "body": [
          "//+------------------------------------------------------------------+",
          "//|                                                    ${1:filename} |",
          "//|                                  Copyright 2024, Your Name.      |",
          "//|                                       https://www.yoursite.com   |",
          "//+------------------------------------------------------------------+"
        ]
      },
      "indicator": {
        "prefix": "indicator",
        "body": [
          "#property indicator_chart_window",
          "#property indicator_buffers ${1:1}",
          "#property indicator_plots   ${1:1}",
          "",
          "#property indicator_label1  \"${2:Label}\"",
          "#property indicator_type1   DRAW_LINE",
          "#property indicator_color1  clrBlue",
          "#property indicator_style1  STYLE_SOLID",
          "#property indicator_width1  1",
          "",
          "double         Buffer[];",
          "",
          "//+------------------------------------------------------------------+",
          "//| Custom indicator initialization function                         |",
          "//+------------------------------------------------------------------+",
          "int OnInit()",
          "{",
          "    SetIndexBuffer(0, Buffer, INDICATOR_DATA);",
          "    return(INIT_SUCCEEDED);",
          "}",
          "",
          "//+------------------------------------------------------------------+",
          "//| Custom indicator iteration function                              |",
          "//+------------------------------------------------------------------+",
          "int OnCalculate(const int rates_total,",
          "                const int prev_calculated,",
          "                const datetime &time[],",
          "                const double &open[],",
          "                const double &high[],",
          "                const double &low[],",
          "                const double &close[],",
          "                const long &tick_volume[],",
          "                const long &volume[],",
          "                const int &spread[])",
          "{",
          "    ${0:// Calculation code}",
          "    ",
          "    return(rates_total);",
          "}"
        ]
      }
    }
  }
} 